/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Student;

import BLL.Person.StudentBLL;
import DAL.Student.Student;
import com.google.protobuf.TextFormat.ParseException;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dat dep trai
 */
public class studentForm extends javax.swing.JPanel {

    /**
     * Creates new form studentForm
     */
    public studentForm() {
        initComponents();
        fillTable();
        txtPersonID.setEditable(false);
    }
    
    private void fillTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Xóa tất cả các dòng trong JTable
        model.setRowCount(0);
    
        // Lấy danh sách sinh viên từ cơ sở dữ liệu
        List<Student> students = StudentBLL.getAllStudents();
    
        // Điền dữ liệu từ danh sách sinh viên vào JTable
        for (Student student : students) {
            Object[] row = {student.getPersonId(), student.getLastName(), student.getFirstName(), student.getEnrollmentDate()};
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        txtLastname = new javax.swing.JTextField();
        txtPersonID = new javax.swing.JTextField();
        txtFirstname = new javax.swing.JTextField();
        txtEnrollmentdate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 255));
        jLabel1.setText("STUDENT");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PersonID", "Lastname", "Firstname", "EnrollmentDate"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        txtSearch.setForeground(new java.awt.Color(51, 51, 51));
        txtSearch.setText("input name...");
        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/icon/search (1).png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/icon/delete (3).png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/icon/add.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/icon/diskette.png"))); // NOI18N
        btnEdit.setText("Save");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        txtPersonID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPersonIDActionPerformed(evt);
            }
        });

        jLabel2.setText("PersonID");

        jLabel3.setText("Lastname");

        jLabel4.setText("Firstname");

        jLabel5.setText("EnrollmentDate");

        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UI/icon/reset.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(180, 180, 180))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel2))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEnrollmentdate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFirstname, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtLastname)
                            .addComponent(txtPersonID, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtSearch)
                        .addGap(24, 24, 24)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPersonID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLastname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEnrollmentdate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReset)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtPersonIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPersonIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPersonIDActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
    txtLastname.setText("");
    txtFirstname.setText("");
    fillTable();
    txtSearch.setText("input name...");
    // Lấy ngày tháng năm hiện tại
    java.util.Date currentDate = new java.util.Date();
    
    // Định dạng ngày tháng năm thành chuỗi
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String formattedDate = dateFormat.format(currentDate);
    
    // Gán chuỗi ngày tháng năm hiện tại vào trường txtEnrollmentdate
    txtEnrollmentdate.setText(formattedDate);
    
    // Lấy PersonID lớn nhất từ cơ sở dữ liệu và tăng giá trị lên 1
    int maxPersonID = StudentBLL.getMaxpersonID() + 1;
    
    // Gán giá trị mới cho JTextField txtPersonID
    txtPersonID.setText(String.valueOf(maxPersonID));
    }//GEN-LAST:event_btnResetActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        // Lấy chỉ mục của hàng được chọn
        int selectedRowIndex = jTable1.getSelectedRow();
        // Lấy model của JTable
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        // Lấy dữ liệu từ hàng được chọn và hiển thị nó lên các JTextField tương ứng
        txtPersonID.setText(model.getValueAt(selectedRowIndex, 0).toString());
        txtLastname.setText(model.getValueAt(selectedRowIndex, 1).toString());
        txtFirstname.setText(model.getValueAt(selectedRowIndex, 2).toString());
        txtEnrollmentdate.setText(model.getValueAt(selectedRowIndex, 3).toString());
    }//GEN-LAST:event_jTable1MousePressed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        int personID = Integer.parseInt(txtPersonID.getText());
        String firstName = txtFirstname.getText();
        String lastName = txtLastname.getText();
        java.util.Date currentDate = new java.util.Date();
        java.sql.Date enrollmentDate = new java.sql.Date(currentDate.getTime());
    
    // Kiểm tra xem các trường nhập liệu có rỗng không
        if (firstName.isEmpty() || lastName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin.");
            return;
        }
    // Lấy personID lớn nhất từ cơ sở dữ liệu và tăng lên một đơn vị
    
    // Tạo đối tượng Student từ thông tin nhập liệu và ngày nhập học
        Student newStudent = new Student();
        newStudent.setPersonId(personID);
        newStudent.setLastName(lastName);
        newStudent.setFirstName(firstName);
        newStudent.setEnrollmentDate(enrollmentDate);
    
    // Thực hiện thêm sinh viên vào cơ sở dữ liệu
    boolean success = StudentBLL.addStudent(newStudent);
    
    // Kiểm tra kết quả thêm sinh viên và thông báo tương ứng
    if (success) {
        JOptionPane.showMessageDialog(this, "Thêm sinh viên thành công.");
        // Gọi phương thức để cập nhật bảng hiển thị sinh viên
        fillTable();
        txtPersonID.setText("");
        txtLastname.setText("");
        txtFirstname.setText("");
        txtEnrollmentdate.setText("");
    } else {
        JOptionPane.showMessageDialog(this, "Thêm sinh viên không thành công. Vui lòng thử lại.");
    }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
         // Lấy personID của sinh viên được chọn trong bảng
    int selectedRowIndex = jTable1.getSelectedRow();
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một sinh viên để xóa.");
        return;
    }
    
    int personId = (int) jTable1.getValueAt(selectedRowIndex, 0);
    
    // Xác nhận xóa sinh viên
    int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa sinh viên này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
    if (option == JOptionPane.YES_OPTION) {
        // Thực hiện xóa sinh viên
        boolean success = StudentBLL.deletePerson(personId);
        
        // Kiểm tra kết quả xóa sinh viên và thông báo tương ứng
        if (success) {
            JOptionPane.showMessageDialog(this, "Xóa sinh viên thành công.");
            // Gọi phương thức để cập nhật bảng hiển thị sinh viên
            fillTable();
            txtPersonID.setText("");
            txtLastname.setText("");
            txtFirstname.setText("");
            txtEnrollmentdate.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Xóa sinh viên không thành công. Vui lòng thử lại.");
        }
    }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
    int personID = Integer.parseInt(txtPersonID.getText());
    String firstName = txtFirstname.getText();
    String lastName = txtLastname.getText();
    java.util.Date currentDate = new java.util.Date();
    java.sql.Date enrollmentDate = new java.sql.Date(currentDate.getTime());
    
    // Tạo đối tượng Student từ thông tin nhập liệu và ngày nhập học
    Student updatedStudent = new Student();
    updatedStudent.setPersonId(personID);
    updatedStudent.setLastName(lastName);
    updatedStudent.setFirstName(firstName);
    updatedStudent.setEnrollmentDate(enrollmentDate);
    
    // Thực hiện cập nhật sinh viên vào cơ sở dữ liệu
    boolean success = StudentBLL.editStudent(updatedStudent);
    
    // Kiểm tra kết quả cập nhật sinh viên và thông báo tương ứng
    if (success) {
        JOptionPane.showMessageDialog(this, "Cập nhật thành công.");
        // Gọi phương thức để cập nhật bảng hiển thị sinh viên
        fillTable();
        txtPersonID.setText("");
        txtLastname.setText("");
        txtFirstname.setText("");
        txtEnrollmentdate.setText("");
        
    } else {
        JOptionPane.showMessageDialog(this, "Cập nhật không thành công. Vui lòng thử lại.");
    }

    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
           String searchText = txtSearch.getText().trim(); // Lấy từ khóa tìm kiếm từ JTextField
    if (searchText.isEmpty() || searchText.equals("input name...")) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập từ khóa tìm kiếm.");
        return;
    }

    // Gọi phương thức tìm kiếm sinh viên theo tên từ lớp BLL
    List<Student> searchResult = StudentBLL.searchStudentByName(searchText);

    if (searchResult.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Không tìm thấy sinh viên nào.");
    } else {
        // Hiển thị kết quả lên JTable
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Xóa tất cả các dòng trong JTable

        // Điền dữ liệu từ kết quả tìm kiếm vào JTable
        for (Student student : searchResult) {
            Object[] row = {student.getPersonId(), student.getLastName(), student.getFirstName(), student.getEnrollmentDate()};
            model.addRow(row);
        }
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
        txtSearch.setText("");
    }//GEN-LAST:event_txtSearchMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtEnrollmentdate;
    private javax.swing.JTextField txtFirstname;
    private javax.swing.JTextField txtLastname;
    private javax.swing.JTextField txtPersonID;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
